@page "/suppliers"
@using Models.SupplierDtos
@using Radzen
@inject IJSRuntime jsRuntime
@inject ISupplierService supplierService

<div class="row mt-4 mb-4 clearfix">
    <div class=col-6>
        <h4 class="card-title primary">Suppliers</h4>
    </div>
    <div class="col-6">
        <NavLink href="/supplier/create" class="btn btn-outline-primary float-right"><i class="fa fa-plus mr-2"></i>New Supplier</NavLink>
    </div>
</div>

@if (!IsLoading)
{
   <RadzenDataGrid  AllowFiltering="true" 
                    AllowColumnResize="true" 
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
        Data="@suppliers" TItem="SupplierDto" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="SupplierDto" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="SupplierDto" Property="Name" Title="Name" Frozen="true" Width="140px" />
            <RadzenDataGridColumn TItem="SupplierDto" Property="AddressLine1" Title="Address Line 1" Width="200px"/>
            <RadzenDataGridColumn TItem="SupplierDto" Property="AddressLine2" Title="Address Line 2" Width="200px" />
            <RadzenDataGridColumn TItem="SupplierDto" Property="City" Title="City" Width="150px" />
            <RadzenDataGridColumn TItem="SupplierDto" Property="PostalCode" Title="Postal Code" Width="100px" />
            <RadzenDataGridColumn TItem="SupplierDto" Property="State.Name" Title="State"  Width="150px" /> 
            <RadzenDataGridColumn TItem="SupplierDto" Property="Id" Title="Action" Filterable="false" Sortable="false" Width="125px"> 
                <Template Context="data">
                    <NavLink class="btn btn-primary" href="@($"supplier/update/{data.Id}")">Edit</NavLink>
                    <button class="btn btn-danger" @onclick="()=>HandelDelete(data.Id)">Delete</button>
                </Template>
            </RadzenDataGridColumn>          
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="text-center mt-5">        
        <div class="spinner-grow text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <div class="spinner-grow text-secondary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>

}
<Confirmation ConfirmationChanged="ConfirmDelete_Click"></Confirmation>

@code {
    public IEnumerable<SupplierDto> suppliers { get; set; } = new List<SupplierDto>();

    private bool IsLoading { get; set; } = false;

    public int? SupplierIdToDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            await LoadSuppliers();
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
            IsLoading = false;
        }
    }

    private async Task LoadSuppliers()
    {
        suppliers = await supplierService.GetSuppliers();
        IsLoading = false;
    }

    private async Task HandelDelete(int supplierId)
    {
        SupplierIdToDelete = supplierId;
        await jsRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if (isConfirmed && SupplierIdToDelete.HasValue)
        {
            try
            {
                await supplierService.DeleteSupplier(SupplierIdToDelete.Value);
                await jsRuntime.ToastrSuccess("Supplier deleted successfully");
                suppliers = suppliers.Where(x => x.Id != SupplierIdToDelete.Value);
            }
            catch (Exception e)
            {
                await jsRuntime.ToastrError(e.Message);
            }
            await jsRuntime.InvokeVoidAsync("HideConfirmationModal");

        }
    }


}
